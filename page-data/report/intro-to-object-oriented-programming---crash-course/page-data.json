{"componentChunkName":"component---src-templates-blog-post-js","path":"/report/intro-to-object-oriented-programming---crash-course/","result":{"data":{"site":{"siteMetadata":{"title":"Lazy Nyaong"}},"markdownRemark":{"id":"9a841fd4-f145-55ed-b190-ddd499fa7345","excerpt":"4 principles of OOP encapsulation access or manipulation to the attribute should be done by method abstraction Abstraction allows the program to be worked onâ€¦","html":"<h2 id=\"4-principles-of-oop\" style=\"position:relative;\"><a href=\"#4-principles-of-oop\" aria-label=\"4 principles of oop permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4 principles of OOP</h2>\n<ul>\n<li>encapsulation</li>\n</ul>\n<p>access or manipulation to the attribute should be done by method</p>\n<ul>\n<li>abstraction</li>\n</ul>\n<p>Abstraction allows the program to be worked on incrementally and prevents it from becoming entangled and complex</p>\n<p>Determine specific points of contact that can act as an interface between classes, and only worry about the implementation when coding it</p>\n<ul>\n<li>Inheritance</li>\n</ul>\n<p>class hierarchy</p>\n<p>access modifiers</p>\n<p>public, private, protected</p>\n<ul>\n<li>polymorphism</li>\n</ul>\n<p>dynamic polymorphism occurs during the runtime of the program</p>\n<p>static polymorphism occurs during compile-time - overloading (methods of the same name but different number of parameters, different types of parameters, different order of parameters)</p>","tableOfContents":"<ul>\n<li><a href=\"/report/intro-to-object-oriented-programming---crash-course/#4-principles-of-oop\">4 principles of OOP</a></li>\n</ul>","timeToRead":1,"frontmatter":{"title":"Intro to Object Oriented Programming - Crash Course","date":"October 13, 2020","description":"4 principles of OOP","category":"report"}}},"pageContext":{"slug":"/report/intro-to-object-oriented-programming---crash-course/","previous":{"fields":{"slug":"/report/mastering-chaos---a-netflix-guide-to-microservices/"},"frontmatter":{"title":"Mastering Chaos - A Netflix Guide to Microservices","category":"report"}},"next":{"fields":{"slug":"/report/my-5-favorite-linux-shell-tricks-for-speeeeeed-(and-efficiency)/"},"frontmatter":{"title":"My 5 Favorite Linux Shell Tricks for SPEEEEEED (and efficiency)","category":"report"}}}},"staticQueryHashes":["2718815002","452372368","63159454"]}