{"componentChunkName":"component---src-templates-blog-post-js","path":"/report/2020-1-2/","webpackCompilationHash":"63ea22224d35cd8ea986","result":{"data":{"site":{"siteMetadata":{"title":"Lazy Nyaong","author":"Oh SeungHyeon"}},"markdownRemark":{"id":"b57d546e-33b2-5729-89fb-2bca60bde9ce","excerpt":"System Design: Tinder as a microservice architecture, Gaurav Sen, 2018.7.2 Tinder Architecture Store Profiles (Images) - 5 images per user Recommend matches…","html":"<h2 id=\"system-design-tinder-as-a-microservice-architecture-gaurav-sen-201872\"><a href=\"#system-design-tinder-as-a-microservice-architecture-gaurav-sen-201872\" aria-label=\"system design tinder as a microservice architecture gaurav sen 201872 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://www.youtube.com/watch?v=tndzLznxq40\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">System Design: Tinder as a microservice architecture, Gaurav Sen, 2018.7.2</a></h2>\n<p>Tinder Architecture</p>\n<ol>\n<li>Store Profiles (Images) - 5 images per user</li>\n<li>Recommend matches (Active 유저의 수)</li>\n<li>note matches</li>\n<li>Direct Messaging</li>\n</ol>\n<p>Image를 저장할 때의 관건은 File vs Blob(DB)</p>\n<h3 id=\"features-you-get-when-you-use-dbstoring-images-as-blob\"><a href=\"#features-you-get-when-you-use-dbstoring-images-as-blob\" aria-label=\"features you get when you use dbstoring images as blob permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>features you get when you use DB(Storing Images as Blob)</h3>\n<ol>\n<li>Mutability - not really need Mutability. why not just save separate file</li>\n<li>Transaction guarantees - there’s no need to do some atomic operation on images</li>\n<li>indexes(Improve Search) - because we don’t need to search data on Blob (it’s just 0s and 1s), it’s not also needed</li>\n<li>Access Control</li>\n</ol>\n<h3 id=\"good-things-when-you-use-file-system\"><a href=\"#good-things-when-you-use-file-system\" aria-label=\"good things when you use file system permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>good things when you use File System</h3>\n<ol>\n<li>Cheaper</li>\n<li>Faster</li>\n<li>Content Delivery network</li>\n</ol>\n<h3 id=\"how-to-implement-updating-profiles\"><a href=\"#how-to-implement-updating-profiles\" aria-label=\"how to implement updating profiles permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>How to implement Updating Profiles</h3>\n<p>on traditional Monolitic system, you can have user account and password(or token) on request and update profile and send success response. that’s enough for now. but what if we have another feature on tomorrow and need authentication for that feature too.</p>\n<p>good way is to have a Gateway Service and so decouple system and no need to duplicate authentication logic.</p>\n<h3 id=\"how-to-send-direct-messages\"><a href=\"#how-to-send-direct-messages\" aria-label=\"how to send direct messages permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>How to send Direct Messages</h3>\n<h4 id=\"protocol\"><a href=\"#protocol\" aria-label=\"protocol permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Protocol</h4>\n<p>on Client-Server communication protocol, HTTP? it is inefficient. peer-peer protocol would be better. XMPP is what you want to use.</p>\n<p>on Websocket or TCP</p>\n<h4 id=\"whos-gonna-maintain-these-connections\"><a href=\"#whos-gonna-maintain-these-connections\" aria-label=\"whos gonna maintain these connections permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Who’s gonna maintain these connections</h4>\n<p>It can be served by Gateway Service. but decouple as much as possible. so make Sessions Service.</p>\n<h3 id=\"noting-recommendation\"><a href=\"#noting-recommendation\" aria-label=\"noting recommendation permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Noting Recommendation</h3>\n<p>Profile Service could handle it or Matcher service would handle it.</p>\n<h3 id=\"how-to-recommend-matching\"><a href=\"#how-to-recommend-matching\" aria-label=\"how to recommend matching permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>How to Recommend Matching</h3>\n<p>there are ages, locations, etc on profile DB. which DB would be good.</p>\n<ol>\n<li>Cassandra/Dynamo</li>\n<li>sharding -> horizontal partitioning (spliting data by location or ages, and searching)</li>\n</ol>","tableOfContents":"<ul>\n<li>\n<p><a href=\"/report/2020-1-2/#system-design-tinder-as-a-microservice-architecture-gaurav-sen-201872\">System Design: Tinder as a microservice architecture, Gaurav Sen, 2018.7.2</a></p>\n<ul>\n<li><a href=\"/report/2020-1-2/#features-you-get-when-you-use-dbstoring-images-as-blob\">features you get when you use DB(Storing Images as Blob)</a></li>\n<li><a href=\"/report/2020-1-2/#good-things-when-you-use-file-system\">good things when you use File System</a></li>\n<li><a href=\"/report/2020-1-2/#how-to-implement-updating-profiles\">How to implement Updating Profiles</a></li>\n<li>\n<p><a href=\"/report/2020-1-2/#how-to-send-direct-messages\">How to send Direct Messages</a></p>\n<ul>\n<li><a href=\"/report/2020-1-2/#protocol\">Protocol</a></li>\n<li><a href=\"/report/2020-1-2/#whos-gonna-maintain-these-connections\">Who’s gonna maintain these connections</a></li>\n</ul>\n</li>\n<li><a href=\"/report/2020-1-2/#noting-recommendation\">Noting Recommendation</a></li>\n<li><a href=\"/report/2020-1-2/#how-to-recommend-matching\">How to Recommend Matching</a></li>\n</ul>\n</li>\n</ul>","timeToRead":2,"frontmatter":{"title":"2020년 1월 둘째 주","date":"January 09, 2020","description":"매주 무엇을 읽고 보았는지 정리하는 글","category":"report"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/report/2020-1-2/","previous":{"fields":{"slug":"/report/2019-12-3/"},"frontmatter":{"title":"2019년 12월 셋째 주","category":"report"}},"next":null}}}