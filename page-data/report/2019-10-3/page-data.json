{"componentChunkName":"component---src-templates-blog-post-js","path":"/report/2019-10-3/","webpackCompilationHash":"c3b56436b9a61c07c0af","result":{"data":{"site":{"siteMetadata":{"title":"Lazy Nyaong","author":"Oh SeungHyeon"}},"markdownRemark":{"id":"434d01a7-8a6b-50ba-a178-b6f73514a607","excerpt":"Videos Readings 13 Tips to Write Faster, Better-Optimized JavaScript Remove Unnecessary Features Avoid Unnecessary Steps Break Out of Loops As Early As Possible…","html":"<h2>Videos</h2>\n<h2>Readings</h2>\n<h3><a href=\"https://medium.com/@bretcameron/13-tips-to-write-faster-better-optimized-javascript-dc1f9ab063d8\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">13 Tips to Write Faster, Better-Optimized JavaScript</a></h3>\n<ol>\n<li>Remove Unnecessary Features</li>\n<li>Avoid Unnecessary Steps</li>\n<li>Break Out of Loops As Early As Possible</li>\n<li>Pre-Compute Once Wherever Possible</li>\n<li>Order Code to Minimise the Number of Operations</li>\n<li>Learn Big O Notation</li>\n<li>Prefer Built-In Methods</li>\n<li>Use the Best Object for the Job</li>\n<li>Don’t Forget About Memory</li>\n<li>Use Monomorphic Forms Where Possible</li>\n<li>Avoid the ‘Delete’ Keyword</li>\n<li>Use Asynchronous Code to Prevent Thread Blocking</li>\n<li>Use Code Splitting</li>\n</ol>","tableOfContents":"<ul>\n<li><a href=\"/report/2019-10-3/#videos\">Videos</a></li>\n<li>\n<p><a href=\"/report/2019-10-3/#readings\">Readings</a></p>\n<ul>\n<li><a href=\"/report/2019-10-3/#13-tips-to-write-faster-better-optimized-javascript\">13 Tips to Write Faster, Better-Optimized JavaScript</a></li>\n</ul>\n</li>\n</ul>","timeToRead":1,"frontmatter":{"title":"2019-10-3","date":"October 14, 2019","description":"매주 무엇을 읽고 보았는지 정리하는 글","category":"report"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/report/2019-10-3/","previous":{"fields":{"slug":"/report/2019-10-2/"},"frontmatter":{"title":"2019-10-2","category":"report"}},"next":null}}}