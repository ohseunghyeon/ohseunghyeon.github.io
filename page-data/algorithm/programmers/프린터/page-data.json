{"componentChunkName":"component---src-templates-blog-post-js","path":"/algorithm/programmers/프린터/","webpackCompilationHash":"6261dd7aa61d08926e59","result":{"data":{"site":{"siteMetadata":{"title":"Lazy Nyaong","author":"Oh SeungHyeon"}},"markdownRemark":{"id":"8490e1be-4655-5065-b048-cb4c857dadc4","excerpt":"…","html":"<h2>문제 설명</h2>\n<p><a href=\"https://programmers.co.kr/learn/courses/30/lessons/42587\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">문제 링크</a></p>\n<p>일반적인 프린터는 인쇄 요청이 들어온 순서대로 인쇄합니다. 그렇기 때문에 중요한 문서가 나중에 인쇄될 수 있습니다. 이런 문제를 보완하기 위해 중요도가 높은 문서를 먼저 인쇄하는 프린터를 개발했습니다. 이 새롭게 개발한 프린터는 아래와 같은 방식으로 인쇄 작업을 수행합니다.</p>\n<ol>\n<li>인쇄 대기목록의 가장 앞에 있는 문서(J)를 대기목록에서 꺼냅니다.</li>\n<li>나머지 인쇄 대기목록에서 J보다 중요도가 높은 문서가 한 개라도 존재하면 J를 대기목록의 가장 마지막에 넣습니다.</li>\n<li>그렇지 않으면 J를 인쇄합니다.</li>\n</ol>\n<p>예를 들어, 4개의 문서(A, B, C, D)가 순서대로 인쇄 대기목록에 있고 중요도가 2 1 3 2 라면 C D A B 순으로 인쇄하게 됩니다.</p>\n<p>내가 인쇄를 요청한 문서가 몇 번째로 인쇄되는지 알고 싶습니다. 위의 예에서 C는 1번째로, A는 3번째로 인쇄됩니다.</p>\n<p>현재 대기목록에 있는 문서의 중요도가 순서대로 담긴 배열 priorities와 내가 인쇄를 요청한 문서가 현재 대기목록의 어떤 위치에 있는지를 알려주는 location이 매개변수로 주어질 때, 내가 인쇄를 요청한 문서가 몇 번째로 인쇄되는지 return 하도록 solution 함수를 작성해주세요.</p>\n<h2>제한사항</h2>\n<ul>\n<li>현재 대기목록에는 1개 이상 100개 이하의 문서가 있습니다.</li>\n<li>인쇄 작업의 중요도는 1~9로 표현하며 숫자가 클수록 중요하다는 뜻입니다.</li>\n<li>location은 0 이상 (현재 대기목록에 있는 작업 수 - 1) 이하의 값을 가지며 대기목록의 가장 앞에 있으면 0, 두 번째에 있으면 1로 표현합니다.</li>\n</ul>\n<h2>입출력 예</h2>\n<table>\n<thead>\n<tr>\n<th>priorities</th>\n<th>location</th>\n<th>return</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>[2, 1, 3, 2]</td>\n<td>2</td>\n<td>1</td>\n</tr>\n<tr>\n<td>[1, 1, 9, 1, 1, 1]</td>\n<td>0</td>\n<td>5</td>\n</tr>\n</tbody>\n</table>\n<h2>입출력 예 설명</h2>\n<p>예제 #1</p>\n<p>문제에 나온 예와 같습니다.</p>\n<p>예제 #2</p>\n<p>6개의 문서(A, B, C, D, E, F)가 인쇄 대기목록에 있고 중요도가 1 1 9 1 1 1 이므로 C D E F A B 순으로 인쇄합니다.</p>\n<p><a href=\"http://www.csc.kth.se/contest/nwerc/2006/problems/nwerc06.pdf\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">출처</a></p>\n<h2>풀이</h2>\n<p>내 선에서는 두 가지 해결법이 나왔다.</p>\n<ol>\n<li>문제에서 제시한 바와 같이 첫 번째 원소보다 큰 게 있으면 뒤로 미루기</li>\n<li>첫 번째 원소보다 크면서 가장 큰 원소를 찾아 그 index를 기준으로 잘라 붙이기</li>\n</ol>\n<p>2번이 조금 더 빨랐고, 최적화의 여지는 있지만 불필요하다고 생각된다.\n왜냐면 1, 2가 아닌 더 좋은 방법이 있을 것 같다는 생각이 들기 때문이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">solution</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">priorities<span class=\"token punctuation\">,</span> location</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> answer <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n  priorities <span class=\"token operator\">=</span> priorities<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">p<span class=\"token punctuation\">,</span> i</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> p<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">,</span> l<span class=\"token punctuation\">:</span> i <span class=\"token operator\">===</span> location <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">let</span> temp<span class=\"token punctuation\">,</span> biggest<span class=\"token punctuation\">,</span> biggestIndex<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    biggest <span class=\"token operator\">=</span> priorities<span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">biggest<span class=\"token punctuation\">,</span> cur<span class=\"token punctuation\">,</span> i</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>biggest<span class=\"token punctuation\">.</span>p <span class=\"token operator\">&lt;</span> cur<span class=\"token punctuation\">.</span>p<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        biggestIndex <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> cur<span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> biggest<span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>priorities<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">!==</span> biggest<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      priorities <span class=\"token operator\">=</span> priorities<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span>biggestIndex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">concat</span><span class=\"token punctuation\">(</span>priorities<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> biggestIndex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n      temp <span class=\"token operator\">=</span> priorities<span class=\"token punctuation\">.</span><span class=\"token function\">shift</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      answer<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>temp<span class=\"token punctuation\">.</span>l<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> answer<span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","frontmatter":{"title":"프린터","date":"September 19, 2019","description":"프로그래머스 코딩테스트 연습 / 고득점 kit / 스택/큐"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/algorithm/programmers/프린터/","previous":{"fields":{"slug":"/algorithm/programmers/베스트앨범/"},"frontmatter":{"title":"베스트앨범"}},"next":{"fields":{"slug":"/blogging/add-draft-feature/"},"frontmatter":{"title":"Gatsby 블로그에 Draft 기능 추가하기"}}}}}