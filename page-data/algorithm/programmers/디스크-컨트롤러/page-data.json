{"componentChunkName":"component---src-templates-blog-post-js","path":"/algorithm/programmers/디스크-컨트롤러/","webpackCompilationHash":"c3b56436b9a61c07c0af","result":{"data":{"site":{"siteMetadata":{"title":"Lazy Nyaong","author":"Oh SeungHyeon"}},"markdownRemark":{"id":"faa943bf-3e33-5989-93f4-90ba5402b0b2","excerpt":"문제 설명 하드디스크는 한 번에 하나의 작업만 수행할 수 있습니다. 디스크 컨트롤러를 구현하는 방법은 여러 가지가 있습니다. 가장 일반적인 방법은 요청이 들어온 순서대로 처리하는 것입니다. 예를들어 0ms 시점에 3ms가 소요되는 A작업 요청 1ms 시점에 9ms가 소요되는 B…","html":"<h2>문제 설명</h2>\n<p>하드디스크는 한 번에 하나의 작업만 수행할 수 있습니다. 디스크 컨트롤러를 구현하는 방법은 여러 가지가 있습니다. 가장 일반적인 방법은 요청이 들어온 순서대로 처리하는 것입니다.</p>\n<p>예를들어</p>\n<ul>\n<li>0ms 시점에 3ms가 소요되는 A작업 요청</li>\n<li>1ms 시점에 9ms가 소요되는 B작업 요청</li>\n<li>2ms 시점에 6ms가 소요되는 C작업 요청</li>\n</ul>\n<p>와 같은 요청이 들어왔습니다. 이를 그림으로 표현하면 아래와 같습니다.</p>\n<p><img src=\"https://grepp-programmers.s3.amazonaws.com/files/production/b68eb5cec6/38dc6a53-2d21-4c72-90ac-f059729c51d5.png\" alt=\"요청\"></p>\n<p>한 번에 하나의 요청만을 수행할 수 있기 때문에 각각의 작업을 요청받은 순서대로 처리하면 다음과 같이 처리 됩니다.</p>\n<p><img src=\"https://grepp-programmers.s3.amazonaws.com/files/production/5e677b4646/90b91fde-cac4-42c1-98b8-8f8431c52dcf.png\" alt=\"이미지 처리 순서\"></p>\n<ul>\n<li>A: 3ms 시점에 작업 완료 (요청에서 종료까지 : 3ms)</li>\n<li>B: 1ms부터 대기하다가, 3ms 시점에 작업을 시작해서 12ms 시점에 작업 완료(요청에서 종료까지 : 11ms)</li>\n<li>C: 2ms부터 대기하다가, 12ms 시점에 작업을 시작해서 18ms 시점에 작업 완료(요청에서 종료까지 : 16ms)</li>\n</ul>\n<p>이 때 각 작업의 요청부터 종료까지 걸린 시간의 평균은 10ms(= (3 + 11 + 16) / 3)가 됩니다.</p>\n<p>하지만 A → C → B 순서대로 처리하면</p>\n<p><img src=\"https://grepp-programmers.s3.amazonaws.com/files/production/9eb7c5a6f1/a6cff04d-86bb-4b5b-98bf-6359158940ac.png\" alt=\"다른 순서로 처리\"></p>\n<ul>\n<li>A: 3ms 시점에 작업 완료(요청에서 종료까지 : 3ms)</li>\n<li>C: 2ms부터 대기하다가, 3ms 시점에 작업을 시작해서 9ms 시점에 작업 완료(요청에서 종료까지 : 7ms)</li>\n<li>B: 1ms부터 대기하다가, 9ms 시점에 작업을 시작해서 18ms 시점에 작업 완료(요청에서 종료까지 : 17ms)</li>\n</ul>\n<p>이렇게 A → C → B의 순서로 처리하면 각 작업의 요청부터 종료까지 걸린 시간의 평균은 9ms(= (3 + 7 + 17) / 3)가 됩니다.</p>\n<p>각 작업에 대해 [작업이 요청되는 시점, 작업의 소요시간]을 담은 2차원 배열 jobs가 매개변수로 주어질 때, 작업의 요청부터 종료까지 걸린 시간의 평균을 가장 줄이는 방법으로 처리하면 평균이 얼마가 되는지 return 하도록 solution 함수를 작성해주세요. (단, 소수점 이하의 수는 버립니다)</p>\n<h2>제한 사항</h2>\n<ul>\n<li>jobs의 길이는 1 이상 500 이하입니다.</li>\n<li>jobs의 각 행은 하나의 작업에 대한 [작업이 요청되는 시점, 작업의 소요시간] 입니다.</li>\n<li>각 작업에 대해 작업이 요청되는 시간은 0 이상 1,000 이하입니다.</li>\n<li>각 작업에 대해 작업의 소요시간은 1 이상 1,000 이하입니다.</li>\n<li>하드디스크가 작업을 수행하고 있지 않을 때에는 먼저 요청이 들어온 작업부터 처리합니다.</li>\n</ul>\n<h2>입출력 예</h2>\n<table>\n<thead>\n<tr>\n<th>jobs</th>\n<th>return</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>[[0, 3], [1, 9], [2, 6]]</td>\n<td>9</td>\n</tr>\n</tbody>\n</table>\n<h2>입출력 예 설명</h2>\n<p>문제에 주어진 예와 같습니다.</p>\n<ul>\n<li>0ms 시점에 3ms 걸리는 작업 요청이 들어옵니다.</li>\n<li>1ms 시점에 9ms 걸리는 작업 요청이 들어옵니다.</li>\n<li>2ms 시점에 6ms 걸리는 작업 요청이 들어옵니다.</li>\n</ul>\n<h2>풀이</h2>\n<h3>해결 전략</h3>\n<ol>\n<li>작업리스트를 정렬하자 => 시작 시간 오름차순, 작업 소요시간 오름차순</li>\n<li>시간이 지남에 따라 요청 받은 작업들을 작업 소요시간에 대한 <strong>최소 힙</strong>으로 정렬하자 (여기선 그렇게 구현하지 않았지만)</li>\n<li>요청 받은 작업을 하나씩 빼서 처리하자</li>\n</ol>\n<h3>코드</h3>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">solution</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">jobs</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> answer <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">let</span> jobLength <span class=\"token operator\">=</span> jobs<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// 시작 시간이 작을 수록, 작업 소요시간이 작을 수록 앞으로 오게 정렬</span>\n  jobs<span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span> b</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> a<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">===</span> b<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">?</span> a<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> b<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">:</span> a<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> b<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">let</span> queue <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">let</span> currentTime <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> jobToDo<span class=\"token punctuation\">,</span> requestedJobs<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>jobs<span class=\"token punctuation\">.</span>length <span class=\"token operator\">||</span> queue<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>jobs<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// currentTime보다 시작 시간이 큰 작업을 찾아서 그 이하의 작업을 가져오기</span>\n      requestedJobs <span class=\"token operator\">=</span> jobs<span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">j</span> <span class=\"token operator\">=></span> j<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;=</span> currentTime<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n      <span class=\"token comment\">// 요청 받은 작업을 큐에 추가</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>requestedJobs<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        jobs<span class=\"token punctuation\">.</span><span class=\"token function\">splice</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> requestedJobs<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        queue <span class=\"token operator\">=</span> queue<span class=\"token punctuation\">.</span><span class=\"token function\">concat</span><span class=\"token punctuation\">(</span>requestedJobs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n\n      <span class=\"token comment\">// 큐가 비었는데 요청된 작업도 없다면 시간을 미래로</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>queue<span class=\"token punctuation\">.</span>length <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span>requestedJobs<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        currentTime <span class=\"token operator\">=</span> jobs<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        queue<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>jobs<span class=\"token punctuation\">.</span><span class=\"token function\">shift</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>queue<span class=\"token punctuation\">.</span>length <span class=\"token operator\">></span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        queue<span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span> b</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> a<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> b<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    jobToDo <span class=\"token operator\">=</span> queue<span class=\"token punctuation\">.</span><span class=\"token function\">shift</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// 작업을 처리하고 흐른 시간</span>\n    currentTime <span class=\"token operator\">+=</span> jobToDo<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// 작업 처리까지 걸린 시간</span>\n    answer <span class=\"token operator\">+=</span> currentTime <span class=\"token operator\">-</span> jobToDo<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">floor</span><span class=\"token punctuation\">(</span>answer <span class=\"token operator\">/</span> jobLength<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3>참고</h3>\n<p><a href=\"https://github.com/trekhleb/javascript-algorithms/tree/master/src/data-structures/heap\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Heap (data-structure)</a></p>","tableOfContents":"<ul>\n<li><a href=\"/algorithm/programmers/%EB%94%94%EC%8A%A4%ED%81%AC-%EC%BB%A8%ED%8A%B8%EB%A1%A4%EB%9F%AC/#%EB%AC%B8%EC%A0%9C-%EC%84%A4%EB%AA%85\">문제 설명</a></li>\n<li><a href=\"/algorithm/programmers/%EB%94%94%EC%8A%A4%ED%81%AC-%EC%BB%A8%ED%8A%B8%EB%A1%A4%EB%9F%AC/#%EC%A0%9C%ED%95%9C-%EC%82%AC%ED%95%AD\">제한 사항</a></li>\n<li><a href=\"/algorithm/programmers/%EB%94%94%EC%8A%A4%ED%81%AC-%EC%BB%A8%ED%8A%B8%EB%A1%A4%EB%9F%AC/#%EC%9E%85%EC%B6%9C%EB%A0%A5-%EC%98%88\">입출력 예</a></li>\n<li><a href=\"/algorithm/programmers/%EB%94%94%EC%8A%A4%ED%81%AC-%EC%BB%A8%ED%8A%B8%EB%A1%A4%EB%9F%AC/#%EC%9E%85%EC%B6%9C%EB%A0%A5-%EC%98%88-%EC%84%A4%EB%AA%85\">입출력 예 설명</a></li>\n<li>\n<p><a href=\"/algorithm/programmers/%EB%94%94%EC%8A%A4%ED%81%AC-%EC%BB%A8%ED%8A%B8%EB%A1%A4%EB%9F%AC/#%ED%92%80%EC%9D%B4\">풀이</a></p>\n<ul>\n<li><a href=\"/algorithm/programmers/%EB%94%94%EC%8A%A4%ED%81%AC-%EC%BB%A8%ED%8A%B8%EB%A1%A4%EB%9F%AC/#%ED%95%B4%EA%B2%B0-%EC%A0%84%EB%9E%B5\">해결 전략</a></li>\n<li><a href=\"/algorithm/programmers/%EB%94%94%EC%8A%A4%ED%81%AC-%EC%BB%A8%ED%8A%B8%EB%A1%A4%EB%9F%AC/#%EC%BD%94%EB%93%9C\">코드</a></li>\n<li><a href=\"/algorithm/programmers/%EB%94%94%EC%8A%A4%ED%81%AC-%EC%BB%A8%ED%8A%B8%EB%A1%A4%EB%9F%AC/#%EC%B0%B8%EA%B3%A0\">참고</a></li>\n</ul>\n</li>\n</ul>","timeToRead":3,"frontmatter":{"title":"디스크 컨트롤러","date":"September 23, 2019","description":"프로그래머스 코딩테스트 연습 / 힙","category":"algorithm/programmers"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/algorithm/programmers/디스크-컨트롤러/","previous":{"fields":{"slug":"/algorithm/programmers/프린터/"},"frontmatter":{"title":"프린터","category":"algorithm/programmers"}},"next":{"fields":{"slug":"/algorithm/programmers/이중우선순위큐/"},"frontmatter":{"title":"이중우선순위큐","category":"algorithm/programmers"}}}}}