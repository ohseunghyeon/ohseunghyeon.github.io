{"componentChunkName":"component---src-templates-blog-post-js","path":"/algorithm/programmers/조이스틱/","webpackCompilationHash":"c2164a50258678775b76","result":{"data":{"site":{"siteMetadata":{"title":"Lazy Nyaong","author":"Oh SeungHyeon"}},"markdownRemark":{"id":"f3deaa60-32b3-5552-a755-392021fa91ac","excerpt":"문제 링크 문제 설명 조이스틱으로 알파벳 이름을 완성하세요. 맨 처음엔 A로만 이루어져 있습니다.\nex) 완성해야 하는 이름이 세 글자면 AAA, 네 글자면 AAAA 조이스틱을 각 방향으로 움직이면 아래와 같습니다. 예를 들어 아래의 방법으로 JAZ…","html":"<p><a href=\"https://programmers.co.kr/learn/courses/30/lessons/42860\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">문제 링크</a></p>\n<h2>문제 설명</h2>\n<p>조이스틱으로 알파벳 이름을 완성하세요. 맨 처음엔 A로만 이루어져 있습니다.\nex) 완성해야 하는 이름이 세 글자면 AAA, 네 글자면 AAAA</p>\n<p>조이스틱을 각 방향으로 움직이면 아래와 같습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">▲ - 다음 알파벳\n▼ - 이전 알파벳 (A에서 아래쪽으로 이동하면 Z로)\n◀ - 커서를 왼쪽으로 이동 (첫 번째 위치에서 왼쪽으로 이동하면 마지막 문자에 커서)\n▶ - 커서를 오른쪽으로 이동</code></pre></div>\n<p>예를 들어 아래의 방법으로 JAZ를 만들 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">- 첫 번째 위치에서 조이스틱을 위로 9번 조작하여 J를 완성합니다.\n- 조이스틱을 왼쪽으로 1번 조작하여 커서를 마지막 문자 위치로 이동시킵니다.\n- 마지막 위치에서 조이스틱을 아래로 1번 조작하여 Z를 완성합니다.\n따라서 11번 이동시켜 &quot;JAZ&quot;를 만들 수 있고, 이때가 최소 이동입니다.</code></pre></div>\n<p>만들고자 하는 이름 name이 매개변수로 주어질 때, 이름에 대해 조이스틱 조작 횟수의 최솟값을 return 하도록 solution 함수를 만드세요.</p>\n<h2>제한 사항</h2>\n<ul>\n<li>name은 알파벳 대문자로만 이루어져 있습니다.</li>\n<li>name의 길이는 1 이상 20 이하입니다.</li>\n</ul>\n<h2>입출력 예</h2>\n<table>\n<thead>\n<tr>\n<th>name</th>\n<th>return</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>JEROEN</td>\n<td>56</td>\n</tr>\n<tr>\n<td>JAN</td>\n<td>23</td>\n</tr>\n</tbody>\n</table>\n<p><a href=\"https://commissies.ch.tudelft.nl/chipcie/archief/2010/nwerc/nwerc2010.pdf\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">출처</a></p>\n<h2>문제 풀이</h2>\n<p>만약 세 글자일 때 ‘AAA’로 시작해서 각각의 알파벳을 name 인자로 들어온 알파벳과 같이 만들어야 한다면,\nname인자로 들어온 알파벳을 ‘AAA’로 만들어도 똑같은 조이스틱 조작 횟수가 될 것이다.</p>\n<ol>\n<li>cursor를 설정한다.</li>\n<li>cursor가 있는 곳의 알파벳이 A가 되도록 만든다.</li>\n<li>다음 커서를 탐색한다.</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">solution</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">let</span> cursor <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">let</span> movement <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> <span class=\"token constant\">A_NEXT_Z_CODE</span> <span class=\"token operator\">=</span> <span class=\"token number\">91</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> <span class=\"token constant\">A_CODE</span> <span class=\"token operator\">=</span> <span class=\"token number\">65</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">let</span> isWorking <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>isWorking<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// change char</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">[</span>cursor<span class=\"token punctuation\">]</span> <span class=\"token operator\">!==</span> <span class=\"token string\">'A'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">const</span> charCode <span class=\"token operator\">=</span> name<span class=\"token punctuation\">[</span>cursor<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">charCodeAt</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      movement <span class=\"token operator\">+=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">min</span><span class=\"token punctuation\">(</span><span class=\"token constant\">A_NEXT_Z_CODE</span> <span class=\"token operator\">-</span> charCode<span class=\"token punctuation\">,</span> charCode <span class=\"token operator\">-</span> <span class=\"token constant\">A_CODE</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      name<span class=\"token punctuation\">[</span>cursor<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">'A'</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// find next cursor</span>\n    <span class=\"token keyword\">let</span> distance <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>distance <span class=\"token operator\">&lt;</span> name<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">const</span> next <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>cursor <span class=\"token operator\">+</span> distance<span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> name<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">const</span> prev <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> distance <span class=\"token operator\">+</span> cursor<span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> name<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>\n\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">[</span>next<span class=\"token punctuation\">]</span> <span class=\"token operator\">!==</span> <span class=\"token string\">'A'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        cursor <span class=\"token operator\">=</span> next<span class=\"token punctuation\">;</span>\n        movement <span class=\"token operator\">+=</span> distance<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">[</span>prev<span class=\"token punctuation\">]</span> <span class=\"token operator\">!==</span> <span class=\"token string\">'A'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        cursor <span class=\"token operator\">=</span> prev<span class=\"token punctuation\">;</span>\n        movement <span class=\"token operator\">+=</span> distance<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n\n      distance<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>distance <span class=\"token operator\">===</span> name<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      isWorking <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> movement<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","tableOfContents":"<ul>\n<li><a href=\"/algorithm/programmers/%EC%A1%B0%EC%9D%B4%EC%8A%A4%ED%8B%B1/#%EB%AC%B8%EC%A0%9C-%EC%84%A4%EB%AA%85\">문제 설명</a></li>\n<li><a href=\"/algorithm/programmers/%EC%A1%B0%EC%9D%B4%EC%8A%A4%ED%8B%B1/#%EC%A0%9C%ED%95%9C-%EC%82%AC%ED%95%AD\">제한 사항</a></li>\n<li><a href=\"/algorithm/programmers/%EC%A1%B0%EC%9D%B4%EC%8A%A4%ED%8B%B1/#%EC%9E%85%EC%B6%9C%EB%A0%A5-%EC%98%88\">입출력 예</a></li>\n<li><a href=\"/algorithm/programmers/%EC%A1%B0%EC%9D%B4%EC%8A%A4%ED%8B%B1/#%EB%AC%B8%EC%A0%9C-%ED%92%80%EC%9D%B4\">문제 풀이</a></li>\n</ul>","timeToRead":2,"frontmatter":{"title":"조이스틱","date":"October 09, 2019","description":"프로그래머스 코딩테스트 연습 / 탐욕법","category":"algorithm/programmers"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/algorithm/programmers/조이스틱/","previous":{"fields":{"slug":"/algorithm/programmers/체육복/"},"frontmatter":{"title":"체육복","category":"algorithm/programmers"}},"next":null}}}