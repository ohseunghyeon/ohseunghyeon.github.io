{"componentChunkName":"component---src-templates-blog-post-js","path":"/algorithm/programmers/단속카메라/","webpackCompilationHash":"e5dd68c52339c1f0bf71","result":{"data":{"site":{"siteMetadata":{"title":"Lazy Nyaong","author":"Oh SeungHyeon"}},"markdownRemark":{"id":"3d51bd8d-539d-5dfc-aca5-ef3cb3f092dd","excerpt":"문제 링크 문제 설명 고속도로를 이동하는 모든 차량이 고속도로를 이용하면서 단속용 카메라를 한 번은 만나도록 카메라를 설치하려고 합니다. 고속도로를 이동하는 차량의 경로 routes…","html":"<p><a href=\"https://programmers.co.kr/learn/courses/30/lessons/42884\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">문제 링크</a></p>\n<h2 id=\"문제-설명\"><a href=\"#%EB%AC%B8%EC%A0%9C-%EC%84%A4%EB%AA%85\" aria-label=\"문제 설명 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>문제 설명</h2>\n<p>고속도로를 이동하는 모든 차량이 고속도로를 이용하면서 단속용 카메라를 한 번은 만나도록 카메라를 설치하려고 합니다.</p>\n<p>고속도로를 이동하는 차량의 경로 routes가 매개변수로 주어질 때, 모든 차량이 한 번은 단속용 카메라를 만나도록 하려면 최소 몇 대의 카메라를 설치해야 하는지를 return 하도록 solution 함수를 완성하세요.</p>\n<h2 id=\"제한사항\"><a href=\"#%EC%A0%9C%ED%95%9C%EC%82%AC%ED%95%AD\" aria-label=\"제한사항 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>제한사항</h2>\n<ul>\n<li>차량의 대수는 1대 이상 10,000대 이하입니다.</li>\n<li>routes에는 차량의 이동 경로가 포함되어 있으며 routes[i][0]에는 i번째 차량이 고속도로에 진입한 지점, routes[i][1]에는 i번째 차량이 - 고속도로에서 나간 지점이 적혀 있습니다.</li>\n<li>차량의 진입/진출 지점에 카메라가 설치되어 있어도 카메라를 만난것으로 간주합니다.</li>\n<li>차량의 진입 지점, 진출 지점은 -30,000 이상 30,000 이하입니다.</li>\n</ul>\n<h2 id=\"입출력-예\"><a href=\"#%EC%9E%85%EC%B6%9C%EB%A0%A5-%EC%98%88\" aria-label=\"입출력 예 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>입출력 예</h2>\n<table>\n<thead>\n<tr>\n<th>routes</th>\n<th>return</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>[[-20,15], [-14,-5], [-18,-13], [-5,-3]]</td>\n<td>2</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"입출력-예-설명\"><a href=\"#%EC%9E%85%EC%B6%9C%EB%A0%A5-%EC%98%88-%EC%84%A4%EB%AA%85\" aria-label=\"입출력 예 설명 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>입출력 예 설명</h2>\n<p>-5 지점에 카메라를 설치하면 두 번째, 네 번째 차량이 카메라를 만납니다.</p>\n<p>-15 지점에 카메라를 설치하면 첫 번째, 세 번째 차량이 카메라를 만납니다.</p>\n<h2 id=\"풀이\"><a href=\"#%ED%92%80%EC%9D%B4\" aria-label=\"풀이 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>풀이</h2>\n<p>나는 이 문제를 스스로 풀지 못했다. 다른 사람의 답을 베꼈으며, 이해를 바탕으로 풀이를 기술한다.</p>\n<p>차량들의 진입, 진출 지점이 있다.</p>\n<p>위의 입출력 예를 도식화하면 다음과 같다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">-20 ------------------------------------ 15\n        -14 ------ -5\n    -18 ---- -13\n                  -5 ---- -3</code></pre></div>\n<p>이 차량의 경로들을 가지고 카메라 설치 위치를 어떻게 구할까?</p>\n<p>나의 경우 진입 지점을 오름차순으로 정렬하여 어떻게 구할지 한참 생각하다가 포기했다.</p>\n<p>그러나 진출 지점을 오름차순으로 정렬할 경우 한결 생각하기 쉽다.</p>\n<p>이에 대한 로직은 다음과 같다.</p>\n<ol>\n<li>차량 경로들을 진출 지점에 대한 오름차순으로 정렬한다.</li>\n<li>카메라가 하나도 없는 상태에서는 첫 번째 경로의 진출 지점에 카메라를 설치한다.</li>\n<li>각 차량을 순회하며 설치된 각각의 카메라에 대해 <strong>다음 차량 경로의 진입 지점 &#x3C;= 카메라 &#x3C;= 진출 지점</strong> 이 false 경우 해당 진출 지점에 카메라를 추가 설치한다.</li>\n</ol>\n<p>이 로직을 바탕으로 카메라를 설치할 경우 다음과 같다</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">    -18 ---- -13\n        -14 ------ -5\n                  -5 ---- -3\n-20 ------------------------------------ 15\n             (cam)       (cam)</code></pre></div>\n<p>이 로직을 구현하기 위해서, 카메라 배열을 만들고 매 차량 경로에 대해서 카메라 배열을 순회하며 확인하는 방법도 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> cameras <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\nroutes<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">[</span>진입<span class=\"token punctuation\">,</span> 진출<span class=\"token punctuation\">]</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  cameras<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">cam</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token punctuation\">(</span>진입 <span class=\"token operator\">&lt;=</span> cam <span class=\"token operator\">&amp;&amp;</span> cam <span class=\"token operator\">&lt;=</span> 진출<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      cameras<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>진출<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">return</span> cameras<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span></code></pre></div>\n<p>그러나 이 경우 routes의 순회가 후반부를 향할 수록 camera에 대해 불필요한 초반부 순회가 이뤄짐을 알 수 있다.</p>\n<p>즉 위의 경우 네 번째 route를 돌 때는 첫 번째 카메라를 순회할 필요가 없다.</p>\n<p>다르게 생각하면, 카메라의 개수만 따로 합산하고, 마지막 카메라의 위치만 알고 있어도 된다는 뜻이다.</p>\n<p>이를 구현하면 다음과 같다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">solution</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">routes</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> answer <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n    routes<span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span> b</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> a<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> b<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">let</span> min <span class=\"token operator\">=</span> Number<span class=\"token punctuation\">.</span><span class=\"token constant\">MIN_SAFE_INTEGER</span><span class=\"token punctuation\">;</span>\n\n    routes<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">[</span>enter<span class=\"token punctuation\">,</span> out<span class=\"token punctuation\">]</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>min <span class=\"token operator\">&lt;</span> enter<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            min <span class=\"token operator\">=</span> out<span class=\"token punctuation\">;</span>\n            answer<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">return</span> answer<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","tableOfContents":"<ul>\n<li><a href=\"/algorithm/programmers/%EB%8B%A8%EC%86%8D%EC%B9%B4%EB%A9%94%EB%9D%BC/#%EB%AC%B8%EC%A0%9C-%EC%84%A4%EB%AA%85\">문제 설명</a></li>\n<li><a href=\"/algorithm/programmers/%EB%8B%A8%EC%86%8D%EC%B9%B4%EB%A9%94%EB%9D%BC/#%EC%A0%9C%ED%95%9C%EC%82%AC%ED%95%AD\">제한사항</a></li>\n<li><a href=\"/algorithm/programmers/%EB%8B%A8%EC%86%8D%EC%B9%B4%EB%A9%94%EB%9D%BC/#%EC%9E%85%EC%B6%9C%EB%A0%A5-%EC%98%88\">입출력 예</a></li>\n<li><a href=\"/algorithm/programmers/%EB%8B%A8%EC%86%8D%EC%B9%B4%EB%A9%94%EB%9D%BC/#%EC%9E%85%EC%B6%9C%EB%A0%A5-%EC%98%88-%EC%84%A4%EB%AA%85\">입출력 예 설명</a></li>\n<li><a href=\"/algorithm/programmers/%EB%8B%A8%EC%86%8D%EC%B9%B4%EB%A9%94%EB%9D%BC/#%ED%92%80%EC%9D%B4\">풀이</a></li>\n</ul>","timeToRead":2,"frontmatter":{"title":"단속카메라","date":"October 22, 2019","description":"프로그래머스 코딩테스트 연습 / 탐욕법","category":"algorithm/programmers"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/algorithm/programmers/단속카메라/","previous":{"fields":{"slug":"/algorithm/programmers/섬-연결하기/"},"frontmatter":{"title":"섬 연결하기","category":"algorithm/programmers"}},"next":{"fields":{"slug":"/algorithm/programmers/저울/"},"frontmatter":{"title":"저울","category":"algorithm/programmers"}}}}}